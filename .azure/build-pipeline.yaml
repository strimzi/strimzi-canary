trigger: 
  branches:
    include:
    - 'main'
    - 'release-*'

pr:
  autoCancel: true
  branches:
    include:
    - '*'

stages:
- stage: go_test
  displayName: Go Test
  jobs:
  - job: go_test
    displayName: Go Test
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    # step for Go installation
    - template: ./templates/steps/setup_go.yaml
    - task: Go@0
      displayName: Go Unit Tests
      inputs:
        command: test
        arguments: ./internal/... --tags=unit_test
    - task: Go@0
      displayName: Go e2e Tests
      inputs:
        command: test
        arguments: ./test/... --tags=e2e
- stage: go_build
  displayName: Go Build
  dependsOn:
  - go_test
  jobs:
  - job: go_build
    displayName: Go Build
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    # step for Go installation
    - template: ./templates/steps/setup_go.yaml
    # step for build Go binary
    - bash: .azure/scripts/go-build.sh
      displayName: Go Build
      env:
        BUILD_REASON: $(Build.Reason)
        BRANCH: $(Build.SourceBranch)
    # We have to TAR the target directory to maintain the permissions of 
    # the files which would otherwise change when downloading the artifact
    - bash: tar -cvpf target.tar ./cmd/target
      displayName: "Tar the target directory"      
    - publish: $(System.DefaultWorkingDirectory)/target.tar
      displayName: Publish binary
      artifact: Binary
- stage: container_build
  displayName: Prepare Container
  dependsOn:
  - go_build
  jobs:
  - template: ./templates/jobs/container_build.yaml
    parameters:
      artifactSource: 'current'
      artifactProject: 'strimzi'
      artifactPipeline: ''
      artifactRunVersion: ''
      artifactRunId: ''
- stage:
  displayName: Publish Container
  dependsOn:
  - container_build
  condition: and(succeeded(), eq(variables['Build.sourceBranch'], 'refs/heads/main'))
  jobs:
  - template: ./templates/jobs/container_push.yaml
    parameters:
      dockerTag: 'latest'
      artifactSource: 'current'
      artifactProject: 'strimzi'
      artifactPipeline: ''
      artifactRunVersion: ''
      artifactRunId: ''